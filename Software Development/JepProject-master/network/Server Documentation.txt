JEOPARDY SERVER INTERFACE DOC---
once you make an instance of JepServer, you must make a new Thread and set it as the Thread's target:
    JepServer server=new JepServer();
    Thread netWorker=new Thread(server);
Then you can start the thread to do enable clients to connect to the server:
            netWorker.start();
Additionally, you can simply call the following methods directly from an instance of JepClient:
    
    String getIpAddress();
        -returns the ip address of the current machine.
        -does not actually need to be connected to the internet to work.
        -returns "err" if there is an error somehow (there shouldn't be).

    void setBoard(String[][] board);
        -sets the question board that will be used for a round in the game.
        -board[0][] should list the categories of the questions, while everything else should be a question, in the obvious order:
            {["Animals","Planets","People","World"],
             ["Easy Animals","Easy Planets","Easy People","Easy World"],
             ["Medium Animals","Medium Planets","Medium People","Medium World"],
             ["Hard Animals","Hard Planets","Hard People","Hard World"]}
        -make sure to set the board before the clients are able to call getBoard(), since they will receive a null board.

    void setScore(int player,int score);
        -sets the score of player# player to score.

    void setScores(int[] scores);
        -sets all the players scores to the corresponding values in scores[].
        -scores should contain three elements; fewer will result in the value of the excluded players
        remaining constant, more will result in only the first three values being used.

    void kickPlayer(int playerNumber);
        -forcibly removes a player from the game.
        -acts similarly to JepClient's quitGame().
        -to be completely honest, I don't know why you would want to call this.

    boolean checkBuzzes();
        -looks if any players have buzzed into a question yet.
        -returns true if there is a buzz, false otherwise.
        -to find which row and column has been buzzed, call getBuzz();
        -should be placed in a while loop once a buzz is expected, i.e.:
            while(!checkBuzzes()){
                //waiting for buzz...
            }
            RowAndColumn = getBuzz();

    int[] getBuzz();
        -returns an int[2] containing the row and column of the buzzed question.
        -ordered [row,column].
        -if no question has been buzzed, i.e. if checkBuzzes() returns false, this will return [-1,-1].
        -resets the buzzed question back to the invalid value [-1,-1] after returning the actual buzzed coordinates.
        this means that you must wait until checkBuzzes() returns true and then only call getBuzz() once.

    String[] getNames();
        -returns a String[3] containing the current names of the game's players.
        -the name of any given player is located at getNames()[playerNumber-1].
        -for finding the scores of the players, see getScores();

    int[] getScores();
        -returns an int[3] containing the current scores of the game's players.
        -the score of any given player is located at getScores()[playerNumber-1].
        -for finding the names of the players, see getNames();

    boolean gameFull();
        -returns true if the game is full (ready to start)
        -returns false otherwise


*I tried to make the server as idiot-proof as possible; hopefully, nothing can crash it.
No promises.

**Always make a thread for the server, even if you use the thread-less methods. 
Making a dedicated thread is how the server is able to respond to every incoming connection.
On that note, hopefully nobody ever tries to DDoS this game.

***It is not possible to respond to a question attempt with correct/incorrect, rather, simply
update the players' scores accordingly and check for changes on the player's end.